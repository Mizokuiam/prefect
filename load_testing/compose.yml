services:
  postgres:
    image: postgres:latest
    container_name: prefect-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: prefect_password
      POSTGRES_DB: prefect
    volumes:
      - prefectdb:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # A multi-stage build for the Prefect server
  # that copies your local repo, installs it in editable mode,
  # and starts uvicorn with OTEL instrumentation.
  prefect-server:
    container_name: prefect-server
    build:
      context: ..
      dockerfile: load_testing/Dockerfile.server
    depends_on:
      - postgres
    environment:
      # Prefect + Postgres
      PREFECT_API_DATABASE_CONNECTION_URL: "postgresql+asyncpg://postgres:prefect_password@postgres:5432/prefect"

      # OTEL environment (point to your collector in local-telemetry)
      OTEL_SERVICE_NAME: "prefect-server"
      OTEL_TRACES_EXPORTER: "otlp"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://collector:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_LOG_LEVEL: "debug"

    # Expose API on port 4200
    ports:
      - "4200:4200"
    # Mount your local Prefect source code so changes take effect without rebuild
    volumes:
      - ../src:/app/src

  # A multi-stage build for the Prefect worker container
  # that uses uv to do an editable install, creates the work pool / deployments,
  # then starts the worker.
  prefect-worker:
    container_name: prefect-worker
    build:
      context: ..
      dockerfile: load_testing/Dockerfile.worker
    depends_on:
      - prefect-server
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: "postgresql+asyncpg://postgres:prefect_password@postgres:5432/prefect"
    # In case you want to keep code in sync, mount again:
    volumes:
      - ../src:/app/src

volumes:
  prefectdb:
